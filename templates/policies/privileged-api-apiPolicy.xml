<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
		<set-variable name="myproduct" value="@(context.Product.Id)" />
		<set-variable name="operationroles" value="{{privileged-api-roles}}" />
		<set-variable name="operationallowed" value="@{
            var responseMessage = "notallowed";
            var product = context.Product.Id;
            var operation = context.Operation.Id;
            JObject roles = JObject.Parse(context.Variables.GetValueOrDefault<string>("operationroles"));
            
            if (roles.ContainsKey(operation))
            {
                string evaluationRole = roles.SelectToken(operation).ToString();
                List<string> evaluationRoleList = new List<string>();
                evaluationRoleList.AddRange(evaluationRole.Split('|'));
                if (evaluationRoleList.Contains(product) || evaluationRoleList.Contains("All"))
                {
                    responseMessage = "allowed";
                }
            }

            return responseMessage;
        }" />
		<choose>
			<when condition="@(context.Variables.GetValueOrDefault<string>("operationallowed") == "notallowed")">
				<return-response>
					<set-status code="403" reason="Operation not allowed for this product" />
				</return-response>
			</when>
		</choose>
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>